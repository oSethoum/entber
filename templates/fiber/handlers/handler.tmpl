package handlers

import (
	"{{ dir .Package }}/db"
	"{{ .Package }}"
	"encoding/json"
	"errors"

	"github.com/gofiber/fiber/v2"
)

{{- $pName := pascal .CurrentSchema.Name }}
{{- $pNames := pascal .CurrentSchema.Name | plural }}
{{- $cName := camel .CurrentSchema.Name  }}
{{- $cNames := camel .CurrentSchema.Name | plural }}

func Read{{ $pName }}(ctx *fiber.Ctx) error {
	id := ctx.Params("id")
	{{ $cName }}, err := db.Client.{{ $pName }}.Get(ctx.UserContext(), id)
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:read-one", {{ $cName }})
}

func Read{{ $pNames }}(ctx *fiber.Ctx) error {
	query := new(ent.{{ $pName }}QueryInput)
	q := ctx.Query("query")
	if q != "" {
		err := json.Unmarshal([]byte(q), query)
		if err != nil {
			return StopWithError(ctx, err)
		}
	}
	{{ $cNames }}, err := db.Client.{{ $pName }}.Query().SetInput(query).All(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:read-many", {{ $cNames }})
}

func Create{{ $pName }}(ctx *fiber.Ctx) error {
	body := new(ent.{{ $pName }}CreateInput)
	err := ctx.BodyParser(body)
	if err != nil {
		return StopWithError(ctx, err)
	}
	if err != nil {
		return StopWithError(ctx, err)
	}
	{{ $cName }}, err := db.Client.{{ $pName }}.Create().SetInput(body).Save(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:create-one", {{ $cName }}, fiber.StatusCreated)
}

func Create{{ $pNames }}(ctx *fiber.Ctx) error {
	body := []*ent.{{ $pName }}CreateInput{}
	err := ctx.BodyParser(&body)
	if err != nil {
		return StopWithError(ctx, err)
	}
	if len(body) == 0 {
		return StopWithError(ctx, errors.New("empty array body"))
	}
	builders := []*ent.{{ $pName }}Create{}
	for _, b := range body {
		builders = append(builders, db.Client.{{ $pName }}.Create().SetInput(b))
	}
	{{ $cNames }}, err := db.Client.{{ $pName }}.CreateBulk(builders...).Save(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:create-many", {{ $cNames }}, fiber.StatusCreated)
}

func Update{{ $pName }}(ctx *fiber.Ctx) error {
	id := ctx.Params("id")
	body := new(ent.{{ $pName }}UpdateInput)
	err := ctx.BodyParser(body)
	if err != nil {
		return StopWithError(ctx, err)
	}
	{{ $cName }}, err := db.Client.{{ $pName }}.UpdateOneID(id).SetInput(body).Save(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:update-one", {{ $cName }})
}

func Update{{ $pNames }}(ctx *fiber.Ctx) error {
	w := ctx.Query("where")
	where := new(ent.{{ $pName }}WhereInput)
	action := db.Client.{{ $pName }}.Update()
	if w != "" {
		err := json.Unmarshal([]byte(w), where)
		if err != nil {
			return StopWithError(ctx, err)
		}
		predicate, err := where.P()
		if err != nil {
			StopWithError(ctx, err)
		}
		action = action.Where(predicate)
	}
	body := new(ent.{{ $pName }}UpdateInput)
	err := ctx.BodyParser(body)
	if err != nil {
		return StopWithError(ctx, err)
	}
	_, err = action.SetInput(body).Save(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:update-many", nil)
}

func Delete{{ $pName }}(ctx *fiber.Ctx) error {
	id := ctx.Params("id")
	err := db.Client.{{ $pName }}.DeleteOneID(id).Exec(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:delete-one", nil)
}

func Delete{{ $pNames }}(ctx *fiber.Ctx) error {
	w := ctx.Query("where")
	where := new(ent.{{ $pName }}WhereInput)
	action := db.Client.{{ $pName }}.Delete()
	if w != "" {
		err := json.Unmarshal([]byte(w), where)
		if err != nil {
			return StopWithError(ctx, err)
		}
		predicate, err := where.P()
		if err != nil {
			return StopWithError(ctx, err)
		}
		action = action.Where(predicate)
	}
	_, err := action.Exec(ctx.UserContext())
	if err != nil {
		return StopWithError(ctx, err)
	}
	return StopWithSuccess(ctx, "{{ $cNames }}:delete-many", nil)
}