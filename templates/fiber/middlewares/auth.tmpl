package middlewares

import (
	"{{ dir .Package }}/config"
	"{{ dir .Package }}/db"
	"{{ .Package }}/user"
	"{{ dir .Package }}/handlers"
	"strings"
	"time"

	"aidanwoods.dev/go-paseto"
	"github.com/gofiber/fiber/v2"
)

func Authorize(ctx *fiber.Ctx) error {
	accessTokenString := ctx.GetReqHeaders()["Authorization"]
	parser := paseto.NewParser()
	accessToken, err := parser.ParseV4Local(config.AccessKey, accessTokenString, config.AccessSecret)
	if err != nil {
		return handlers.StopWithError(ctx, err, fiber.StatusUnauthorized)
	}
	permissions, err := accessToken.GetString("permissions")
	if (err != nil || strings.Contains(permissions, ctx.Route().Name)) && ctx.Route().Name != "" {
		code := fiber.StatusUnauthorized
		return ctx.Status(code).JSON(fiber.Map{
			"code":   code,
			"status": "error",
			"error": fiber.Map{
				"type":    "authorization",
				"message": "unauthorized access",
			},
		})
	}
	userId, _ := accessToken.GetString("userId")
	ctx.Context().SetUserValue("userId", userId)
	return ctx.Next()
}