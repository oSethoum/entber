import { API, ID } from "./types.ts";
import { EventSource } from "https://deno.land/x/eventsource@v0.0.3/mod.ts";

type Response<T> = {
  code: number;
  status: "success" | "error";
  error?: string;
  data?: T;
};

type MessageEvent<T> = {
  event: Event;
  data?: T;
};

export type Event =
  | "read-one"
  | "read-many"
  | "create-one"
  | "create-many"
  | "update-one"
  | "update-many"
  | "delete-one"
  | "delete-many";

export class Entber {
  readonly url: string;
  eventSource: EventSource;
  id?: string;
  // deno-lint-ignore no-explicit-any
  private callbacks: Map<string, Array<(data: any) => void>>;
  constructor(url: string) {
    this.url = url.replace(/\/+$/, "");
    this.eventSource = new EventSource(this.url + "/sse");
    this.callbacks = new Map();
    // deno-lint-ignore no-explicit-any
    this.eventSource.addEventListener("id", (e: any) => {
      console.log(JSON.stringify(e, null, 1));
      this.id = e.data;
    });
    // deno-lint-ignore no-explicit-any
    this.eventSource.addEventListener("message", (e: any) => {
      const message = JSON.parse(e.data);
      console.log(message);

      const callbacks = this.callbacks.get(message.event);
      console.log(callbacks?.length);

      callbacks?.forEach((callback) => callback(e.data));
      console.log(this.callbacks.size);
    });
  }

  async find<T extends keyof API>(resource: T, id: ID): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const response = await fetch(url);
    return response.json();
  }

  async query<T extends keyof API>(
    resource: T,
    query?: API[T]["queryInput"]
  ): Promise<Response<Array<API[T]["entity"]>>> {
    const url = `${this.url}/${String(resource)}/${query ? `?query=${JSON.stringify(query)}` : ""}`;
    const response = await fetch(url);
    return response.json();
  }

  async create<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "POST", headers, body });
    return response.json();
  }

  async createBulk<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"][]
  ): Promise<Response<API[T]["entity"][]>> {
    const url = `${this.url}/${String(resource)}/bulk`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "POST", headers, body });
    return response.json();
  }

  async update<T extends keyof API>(
    resource: T,
    id: ID,
    input: API[T]["updateInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const headers = { "content-type": "application/json" };
    const body = JSON.stringify(input);
    const response = await fetch(url, { method: "PATCH", headers, body });
    return response.json();
  }

  async updateMany<T extends keyof API>(
    resource: T,
    input: API[T]["updateInput"],
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${where ? `?${JSON.stringify(where)}` : ""}`;
    const body = JSON.stringify(input);
    const headers = { "content-type": "application/json" };
    const response = await fetch(url, { method: "PATCH", headers, body });
    return response.json();
  }

  async delete<T extends keyof API>(resource: T, id: ID): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${id}`;
    const response = await fetch(url, { method: "DELETE" });
    return response.json();
  }

  async deleteMany<T extends keyof API>(
    resource: T,
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `${this.url}/${String(resource)}/${where ? `?${JSON.stringify(where)}` : ""}`;
    const response = await fetch(url, { method: "DELETE" });
    return response.json();
  }

  async subscribe<T extends keyof API, V extends Event>(
    resource: T,
    event: V,
    callback: (data: MessageEvent<V>) => void
  ) {
    const body = JSON.stringify({
      resource,
      event,
      mode: "subscribe",
    });
    const response = await fetch(`${this.url}/sub/${this.id}`, {
      headers: {
        "content-type": "application/json",
      },
      method: "POST",
      body,
    });
    if (response.status == 200) {
      const callbacks = this.callbacks.get(`${resource}:${event}`) || [];
      callbacks.push(callback);
      this.callbacks.set(`${resource}:${event}`, callbacks);
    } else {
      console.error("error subscribing", `${resource}:${event}`);
    }
    return response.json();
  }

  async unsubscribe<T extends keyof API>(resource: T, event: Event) {
    const body = JSON.stringify({
      resource,
      event,
      mode: "unsubscribe",
    });
    const response = await fetch(`${this.url}/sse/${this.id}`, {
      headers: {
        "content-type": "application/json",
      },
      method: "POST",
      body,
    });

    if (response.status == 200) {
      this.callbacks.delete(`${resource}:${event}`);
    } else {
      console.error("error unsubscribing", `${resource}:${event}`);
    }
  }
  async unsubscribeAll() {
    const body = JSON.stringify({
      mode: "unsubscribe-all",
    });
    const response = await fetch(`${this.url}/sub/${this.id}`, {
      method: "POST",
      body,
    });
    if (response.status == 200) {
      this.callbacks.clear();
    } else {
      console.error("error unsubscribing all");
    }
  }
}
