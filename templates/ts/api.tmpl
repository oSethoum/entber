import { API, ID, AuthAPI, Response, User, Event } from "./types";

export class Entber {
  private readonly url: string;
  private accessToken: string;
  constructor(url: string) {
    this.accessToken = "";
    this.url = url.replace(/\/+$/, "");
  }

  getUrl = () => this.url;

  async isLoggedIn() {
    const response: Response<User> = await this.request("/logged-in");
    return response;
  }

  private storeToken(token: string) {
    this.accessToken = token;
    localStorage.setItem("accessToken", token);
  }

  getToken(): string {
    if (this.accessToken == "") {
      this.accessToken = localStorage.getItem("accessToken") || "";
    }
    return this.accessToken;
  }

  async request(url: string, init?: RequestInit): Promise<Response<any>> {
    const method = init?.method || "GET";
    const headers = {
      "content-type": "application/json",
      authorization: this.getToken(),
      ...init?.headers,
    };
    let response = await fetch(`${this.url}${url}`, {
      method,
      ...init,
      headers,
    });
    const json = await response.json();
    console.log(json);
    return json;
  }

  async login(
    input: AuthAPI["login"]["input"]
  ): Promise<Response<AuthAPI["login"]["response"]>> {
    const body = JSON.stringify(input);
    const response: Response<AuthAPI["login"]["response"]> = await this.request(
      "/login",
      { method: "POST", body }
    );
    if (response.code == 200) {
      this.storeToken(response.data?.accessToken);
    }
    return response;
  }

  async register(
    input: AuthAPI["register"]["input"]
  ): Promise<Response<AuthAPI["register"]["response"]>> {
    const response = await this.request("/register", {
      method: "POST",
      body: JSON.stringify(input),
    });
    return response;
  }

  async logout() {
    const response: Response = await this.request("/logout");
    if (response.code == 200 || response.code == 401) {
      this.accessToken = "";
      localStorage.removeItem("accessToken");
    }
    return response;
  }

  async find<T extends keyof API>(
    resource: T,
    id: ID
  ): Promise<Response<API[T]["entity"]>> {
    const url = `/${String(resource)}/${id}`;
    return await this.request(url);
  }

  async query<T extends keyof API>(
    resource: T,
    query?: API[T]["queryInput"]
  ): Promise<Response<Array<API[T]["entity"]>>> {
    const url = `/${String(resource)}/${
      query ? `?query=${JSON.stringify(query)}` : ""
    }`;
    return await this.request(url);
  }

  async create<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `/${String(resource)}/`;
    const body = JSON.stringify(input);
    return await this.request(url, { method: "POST", body });
  }

  async createBulk<T extends keyof API>(
    resource: T,
    input: API[T]["createInput"][]
  ): Promise<Response<API[T]["entity"][]>> {
    const url = `/${String(resource)}/bulk`;
    const body = JSON.stringify(input);
    return await this.request(url, { method: "POST", body });
  }

  async update<T extends keyof API>(
    resource: T,
    id: ID,
    input: API[T]["updateInput"]
  ): Promise<Response<API[T]["entity"]>> {
    const url = `/${String(resource)}/${id}`;
    const body = JSON.stringify(input);
    return await this.request(url, { method: "PATCH", body });
  }

  async updateMany<T extends keyof API>(
    resource: T,
    input: API[T]["updateInput"],
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `/${String(resource)}/${
      where ? `?${JSON.stringify(where)}` : ""
    }`;
    const body = JSON.stringify(input);
    return await this.request(url, { method: "PATCH", body });
  }

  async delete<T extends keyof API>(
    resource: T,
    id: ID
  ): Promise<Response<undefined>> {
    const url = `/${String(resource)}/${id}`;
    return await this.request(url, { method: "DELETE" });
  }

  async deleteMany<T extends keyof API>(
    resource: T,
    where?: API[T]["whereInput"]
  ): Promise<Response<undefined>> {
    const url = `/${String(resource)}/${
      where ? `?${JSON.stringify(where)}` : ""
    }`;
    return await this.request(url, { method: "DELETE" });
  }
}
